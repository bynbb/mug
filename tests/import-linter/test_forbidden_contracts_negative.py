from __future__ import annotations

import configparser
import contextlib
import subprocess
import sys
from pathlib import Path
from typing import Iterable
import pytest

# Skip if import-linter is not installed locally (CI installs it via .[test])
pytest.importorskip("importlinter", reason="import-linter not installed; install with `pip install -e .[test]`")

ROOT = Path(__file__).resolve().parents[2]
SRC = ROOT / "src"
CONFIG = ROOT / ".importlinter"


def _parse_forbidden_contracts(cfg_path: Path):
    """
    Parse .importlinter and yield tuples of:
    (contract_name, set(source_modules), set(forbidden_modules))
    for contracts with `type = forbidden`.
    """
    parser = configparser.ConfigParser()
    with cfg_path.open("r", encoding="utf-8") as f:
        parser.read_file(f)

    for section in parser.sections():
        if not section.startswith("importlinter:contract:"):
            continue
        typ = parser.get(section, "type", fallback="").strip().lower()
        if typ != "forbidden":
            continue

        human = parser.get(section, "name", fallback=section)

        def _multiline_get(key: str) -> set[str]:
            raw = parser.get(section, key, fallback="")
            items: list[str] = []
            for line in raw.splitlines():
                line = line.strip()
                if not line:
                    continue
                items.extend([p.strip() for p in line.split(",") if p.strip()])
            return set(items)

        sources = _multiline_get("source_modules")
        forbiddens = _multiline_get("forbidden_modules")
        if sources and forbiddens:
            yield human, sources, forbiddens


@contextlib.contextmanager
def _temp_violation_file(py_pkg: str, import_target: str) -> Iterable[Path]:
    """
    Create a temporary python file inside the given package that imports the forbidden target.
    Ensures parent directories and __init__.py files exist. Cleans up afterward.
    """
    # e.g., "mug.foo.bar" -> src/mug/foo/bar
    path_parts = Path(*py_pkg.split("."))
    pkg_path = SRC / path_parts
    pkg_path.mkdir(parents=True, exist_ok=True)

    # Ensure each package dir has an __init__.py (but NOT the src root)
    running = SRC
    for part in path_parts.parts:
        running = running / part
        running.mkdir(parents=True, exist_ok=True)
        init_file = running / "__init__.py"
        if not init_file.exists():
            init_file.write_text("# created by import-linter negative test\n", encoding="utf-8")

    tmp_file = pkg_path / "_il_tmp_violation.py"
    tmp_file.write_text(
        f"# Auto-generated by test_forbidden_contracts_negative\n"
        f"from {import_target} import __doc__  # force import of forbidden module\n",
        encoding="utf-8",
    )

    try:
        yield tmp_file
    finally:
        with contextlib.suppress(FileNotFoundError):
            tmp_file.unlink()
        with contextlib.suppress(Exception):
            c = pkg_path / "__pycache__"
            if c.exists():
                for f in c.iterdir():
                    with contextlib.suppress(Exception):
                        f.unlink()
                c.rmdir()


def test_forbidden_contracts_are_enforced():
    """
    For each forbidden contract:
      1) Pick one source module and one forbidden module.
      2) Create a temp file inside the source package that imports the forbidden package.
      3) Run Import Linter and expect a non-zero exit code.
      4) Clean up temp files.
    """
    assert CONFIG.is_file(), f"Missing .importlinter at {CONFIG}"

    contracts = list(_parse_forbidden_contracts(CONFIG))
    if not contracts:
        pytest.skip("No 'forbidden' contracts declared in .importlinter")

    for (human, sources, forbiddens) in contracts:
        src = sorted(sources)[0]
        bad = sorted(forbiddens)[0]

        with _temp_violation_file(src, bad):
            proc = subprocess.run(
                [sys.executable, "-m", "lint_imports", "--config", str(CONFIG)],
                cwd=str(ROOT),
                capture_output=True,
                text=True,
            )
            assert proc.returncode != 0, (
                f"Expected Import Linter to fail for contract '{human}' when injecting a violation, "
                f"but it returned 0.\n--- stdout ---\n{proc.stdout}\n--- stderr ---\n{proc.stderr}"
            )
