name: CI-CD Pipeline

on:
  push:
    branches: [ env-test ]
    tags: [ 'v*.*.*' ]

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # build wheel from source and install it (no editable)
      - name: install project + test deps (wheel-based)
        run: |
          python -m pip install -U pip build
          python -m build --sdist --wheel
          pip install dist/*.whl
          pip install ruff mypy pytest pytest-cov pytest-mock

      - name: run tests (use pytest.ini addopts)
        run: python -m pytest -q

      - name: upload html report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov
          path: htmlcov
          if-no-files-found: ignore

  build:
    needs: test
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: build sdist + wheel
        run: |
          python -m pip install -U pip build
          python -m build --sdist --wheel
      - name: upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  smoke:
    needs: build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: download dist artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - name: offline install from dist
        run: |
          ls -lah dist
          python -m pip install --no-index --no-deps dist/*.whl
      - name: smoke test
        run: python -c "import mug; print(mug.__version__)"

  deploy:
    needs: [ build, smoke ]
    if: github.ref == 'refs/heads/env-test' || startsWith(github.ref, 'refs/tags/v')
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: download dist artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: validate pyproject.toml version matches tag
        run: |
          TAG_VERSION="${GITHUB_REF##*/}"
          PY_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml','rb'))['project']['version'])")
          if [ "v$PY_VERSION" != "$TAG_VERSION" ]; then
            echo "version mismatch: pyproject.toml ($PY_VERSION) != tag (${TAG_VERSION#v})"
            exit 1
          fi

      - name: install publish deps
        run: |
          python -m pip install -U pip twine

      - name: upload to pypi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: python -m twine upload dist/*
