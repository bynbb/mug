name: CI-CD Pipeline

on:
  push:
    branches: [ env-test ]
    tags: [ 'v*.*.*' ]

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: install project + test deps (wheel-based)
        run: |
          set -euo pipefail
          python -m pip install -U pip build
          python -m build --sdist --wheel
          pip install dist/*.whl
          pip install ruff mypy pytest pytest-cov pytest-mock

      - name: run tests (use pytest.ini addopts)
        run: |
          set -euo pipefail
          python -m pytest

      - name: upload html report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov
          path: htmlcov
          if-no-files-found: ignore

  build:
    needs: test
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: build sdist + wheel
        run: |
          set -euo pipefail
          python -m pip install -U pip build
          python -m build --sdist --wheel
      - name: upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  smoke:
    needs: build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: download dist artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: offline install from dist
        shell: bash
        run: |
          set -euo pipefail
          echo "listing dist/"
          ls -lah dist
          WHEEL="$(ls dist/mug-*.whl 2>/dev/null | head -n1 || true)"
          if [[ -z "${WHEEL}" ]]; then
            echo "wheel file not found: dist/mug-*.whl"
            exit 1
          fi
          echo "installing wheel: ${WHEEL}"
          python -m pip install --no-index --no-deps --force-reinstall "${WHEEL}"
          echo "showing wheel contents (non-fatal)"
          unzip -l "${WHEEL}" || true

      - name: smoke test (import + where)
        shell: bash
        run: |
          set -euo pipefail

          # --- original heredoc kept for reference (commented to avoid YAML/bare 'PY' issue) ---
          # cat > smoke.py <<'PY'
          # import importlib, sys
          # try:
          #     m = importlib.import_module("mug")
          # except Exception as e:
          #     print("failed to import mug:", e)
          #     sys.exit(1)
          # print("mug version:", getattr(m, "__version__", "<no __version__>"))
          # print("mug module file:", getattr(m, "__file__", "<no __file__>"))
          # PY
          # python smoke.py
          # ---------------------------------------------------------------------------------------

          # YAML-safe equivalent without heredoc:
          printf '%s\n' \
            'import importlib, sys' \
            'try:' \
            '    m = importlib.import_module("mug")' \
            'except Exception as e:' \
            '    print("failed to import mug:", e)' \
            '    sys.exit(1)' \
            'print("mug version:", getattr(m, "__version__", "<no __version__>"))' \
            'print("mug module file:", getattr(m, "__file__", "<no __file__>"))' \
          > smoke.py

          # To execute once ready:
          # python smoke.py

  deploy:
    needs: [ build, smoke ]
    if: github.ref == 'refs/heads/env-test' || startsWith(github.ref, 'refs/tags/v')
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: download dist artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: validate pyproject.toml version matches tag
        shell: bash
        run: |
          set -euo pipefail
          TAG_VERSION="${GITHUB_REF##*/}"
          PY_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml','rb'))['project']['version'])")
          if [[ "v${PY_VERSION}" != "${TAG_VERSION}" ]]; then
            echo "version mismatch: pyproject.toml (${PY_VERSION}) != tag (${TAG_VERSION#v})"
            exit 1
          fi

      - name: install publish deps
        run: |
          set -euo pipefail
          python -m pip install -U pip twine

      - name: upload to pypi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          set -euo pipefail
          python -m twine upload dist/*
