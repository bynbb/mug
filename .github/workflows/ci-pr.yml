name: CI-CD PR

on:
  pull_request:
    branches:
      - main
      - env-test
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: install project + test deps (editable)
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install -U pip
          # brings in pytest, ruff, import-linter, pyyaml, etc. from pyproject optional deps
          python -m pip install -e .[test]

      - name: architecture contracts (Import Linter)
        shell: bash
        run: |
          set -euo pipefail
          rm -rf .import_linter_cache || true
          lint-imports --config .importlinter --show-timings

      - name: run tests (use pytest.ini addopts)
        shell: bash
        run: |
          set -euo pipefail
          python -m pytest

      - name: upload html report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov
          path: htmlcov
          if-no-files-found: ignore

  build:
    needs: test
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: build sdist + wheel
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install -U pip build
          python -m build --sdist --wheel

      - name: upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  smoke:
    needs: build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: download dist artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: offline install from dist (verify wheel contents first)
        shell: bash
        run: |
          set -euo pipefail
          echo "listing dist/"
          ls -lah dist || true

          # Find exactly one wheel
          mapfile -t WHEELS < <(ls dist/mug-*.whl 2>/dev/null || true)
          if [[ ${#WHEELS[@]} -eq 0 ]]; then
            echo "ERROR: wheel file not found: dist/mug-*.whl"
            ls -lah dist || true
            exit 1
          elif [[ ${#WHEELS[@]} -gt 1 ]]; then
            echo "ERROR: multiple wheels found:"
            printf '  %s\n' "${WHEELS[@]}"
            exit 1
          fi
          WHEEL="${WHEELS[0]}"
          echo "candidate wheel: ${WHEEL}"

          echo "verifying wheel contains 'mug/cli/__init__.py' via Python stdlib..."
          python - "${WHEEL}" <<'PY'
import sys, zipfile
wheel = sys.argv[1]
want = "mug/cli/__init__.py"
with zipfile.ZipFile(wheel) as zf:
    names = set(zf.namelist())
    if want not in names:
        print("ERROR: wheel is missing", want)
        # Show a quick listing for debugging
        for n in sorted(n for n in names if n.startswith("mug/")):
            print("  ", n)
        raise SystemExit(1)
print("OK: wheel contains", want)
PY

          echo "installing wheel: ${WHEEL}"
          python -m pip install --no-index --no-deps --force-reinstall "${WHEEL}"

          echo "showing wheel contents (non-fatal, Python stdlib)"
          python - "${WHEEL}" <<'PY'
import sys, zipfile
with zipfile.ZipFile(sys.argv[1]) as zf:
    for n in sorted(zf.namelist()):
        if n.startswith(("mug/", "mug-")):
            print(n)
PY

      - name: smoke test (import + where)
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
import importlib
for mod in ("mug", "mug.cli"):
    m = importlib.import_module(mod)
    print(f"{mod} file:", getattr(m, "__file__", "<no __file__>"))
# Assert CLI is importable
importlib.import_module("mug.cli")
PY
